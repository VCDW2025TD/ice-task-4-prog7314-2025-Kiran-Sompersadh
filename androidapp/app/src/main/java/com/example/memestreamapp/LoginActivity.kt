package com.example.memestreamapp

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.biometric.BiometricManager
import androidx.biometric.BiometricPrompt
import androidx.core.content.ContextCompat
import com.example.memestreamapp.databinding.ActivityLoginBinding
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.google.android.gms.auth.api.signin.GoogleSignInOptions
import com.google.android.gms.common.api.ApiException
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.GoogleAuthProvider


class LoginActivity : AppCompatActivity() {

    private lateinit var binding: ActivityLoginBinding
    private lateinit var auth: FirebaseAuth
    private val prefs by lazy { getSharedPreferences("memestream_prefs", Context.MODE_PRIVATE) }

    private val signInLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
        try {
            val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)
            val account = task.getResult(ApiException::class.java)
            val idToken = account?.idToken
            if (idToken != null) {
                firebaseAuthWithGoogle(idToken)
            } else {
                showToast("Google sign-in failed: no id token")
                binding.progressBar.visibility = android.view.View.GONE
            }
        } catch (e: ApiException) {
            binding.progressBar.visibility = android.view.View.GONE
            showToast("Google sign-in failed: ${e.statusCode}")
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityLoginBinding.inflate(layoutInflater)
        setContentView(binding.root)

        auth = FirebaseAuth.getInstance()

        // Configure Google Sign-In
        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
            .requestIdToken(getString(R.string.default_web_client_id)) // generated by google-services.json
            .requestEmail()
            .build()

        val googleSignInClient = com.google.android.gms.auth.api.signin.GoogleSignIn.getClient(this, gso)

        binding.btnSignIn.setOnClickListener {
            binding.progressBar.visibility = android.view.View.VISIBLE
            val signInIntent = googleSignInClient.signInIntent
            signInLauncher.launch(signInIntent)
        }
    }

    private fun firebaseAuthWithGoogle(idToken: String) {
        val credential = GoogleAuthProvider.getCredential(idToken, null)
        auth.signInWithCredential(credential)
            .addOnCompleteListener(this) { task ->
                binding.progressBar.visibility = android.view.View.GONE
                if (task.isSuccessful) {
                    // signed in
                    askToEnableBiometric()
                } else {
                    showToast("Authentication failed: ${task.exception?.localizedMessage}")
                }
            }
    }

    private fun askToEnableBiometric() {
        // If device supports biometrics and user hasnt already enabled it, offer to enable
        val bm = BiometricManager.from(this)
        val canAuthenticate = bm.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_STRONG)
        if (canAuthenticate == BiometricManager.BIOMETRIC_SUCCESS && !prefs.getBoolean("biometric_enabled", false)) {
            AlertDialog.Builder(this)
                .setTitle("Enable biometric login?")
                .setMessage("Quickly unlock MemeStream using fingerprint/face on this device.")
                .setPositiveButton("Enable") { _, _ ->
                    prefs.edit().putBoolean("biometric_enabled", true).apply()
                    // authenticate to confirm user
                    authenticateWithBiometrics {
                        if (it) goToMain() else goToMain()
                    }
                }
                .setNegativeButton("Not now") { _, _ ->
                    goToMain()
                }
                .show()
        } else {
            goToMain()
        }
    }

    private fun authenticateWithBiometrics(onComplete: (Boolean) -> Unit) {
        val executor = ContextCompat.getMainExecutor(this)
        val biometricPrompt = BiometricPrompt(this, executor, object : BiometricPrompt.AuthenticationCallback() {
            override fun onAuthenticationSucceeded(result: BiometricPrompt.AuthenticationResult) {
                runOnUiThread { onComplete(true) }
            }
            override fun onAuthenticationError(errorCode: Int, errString: CharSequence) {
                runOnUiThread { onComplete(false) }
            }
            override fun onAuthenticationFailed() {
                runOnUiThread { onComplete(false) }
            }
        })

        val promptInfo = BiometricPrompt.PromptInfo.Builder()
            .setTitle("Authenticate to continue")
            .setSubtitle("Use your fingerprint or face")
            .setAllowedAuthenticators(BiometricManager.Authenticators.BIOMETRIC_STRONG or BiometricManager.Authenticators.DEVICE_CREDENTIAL)
            .build()

        biometricPrompt.authenticate(promptInfo)
    }

    private fun goToMain() {
        startActivity(Intent(this, MainActivity::class.java))
        finish()
    }

    private fun showToast(msg: String) {
        Toast.makeText(this, msg, Toast.LENGTH_LONG).show()
    }
}